@page "/post-details"
@page "/post-details/{PostId:long}"
@inject NavigationManager NavMgr
@inject IJSRuntime IJS
@inject IToastService toastService

@inject UserProfileService UserSvc
@inject AppState AppState
@inject PostService PostSvc
@inject PostCommentService CommentSvc
<main>

    <!-- Container START -->
    <div>
        <div class="container">
            <div class="row">
                <div class="col-lg-8 mx-auto">
                    <div class="card card-body">
                        @if(CurrentPost.PostType == PostTypes.ImagePost)
                        {
                            <!-- Fees images -->
                            <img class="card-img rounded" src="@CurrentPost.ImageUrls" alt="">
                        }else if (CurrentPost.PostType == PostTypes.VideoPost)
                        {
                            <div class="overflow-hidden fullscreen-video w-100">

                                <!-- HTML video START -->
                                <div class="player-wrapper overflow-hidden">
                                    <video class="player-html" controls crossorigin="anonymous" poster="@CurrentPost.Video?.ThumbnailUrl">
                                        <source src="@(string.IsNullOrEmpty(CurrentPost.VideoUrls)?"assets/images/videos/video-feed.mp4": CurrentPost.VideoUrls)" type="video/mp4">
                                    </video>
                                </div>
                                <!-- HTML video END -->
                                <!-- Plyr resources and browser polyfills are specified in the pen settings -->
                            </div>
                        }

                        <!-- Feed meta START -->
                        <div class="d-flex align-items-center justify-content-between my-3">
                            <div class="d-flex align-items-center">
                                <!-- Avatar -->
                                <div class="avatar avatar-story me-2">
                                    <a href="#!"> <img class="avatar-img rounded-circle" src="@(string.IsNullOrEmpty(CurrentPost.User.PicUrl)?"assets/images/avatar/04.jpg":CurrentPost.User.PicUrl)" alt=""> </a>
                                </div>
                                <!-- Info -->
                                <div>
                                    <div class="nav nav-divider">
                                        <h6 class="nav-item card-title mb-0"> <a href="#!"> @CurrentPost.User.FullName </a></h6>
                                        <span class="nav-item small"> @DateHelper.GetElapsedTime(CurrentPost.CreatedDate)</span>
                                    </div>
                                    <p class="mb-0 small">@CurrentPost.User.Job</p>
                                </div>
                            </div>
                            <!-- Card feed action dropdown START -->
                            <div class="dropdown">
                                <a href="#" class="text-secondary btn btn-secondary-soft-hover py-1 px-2" id="cardFeedAction" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots"></i>
                                </a>
                                <!-- Card feed action dropdown menu -->
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="cardFeedAction">
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-bookmark fa-fw pe-2"></i>Save post</a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-person-x fa-fw pe-2"></i>Unfollow lori ferguson </a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-x-circle fa-fw pe-2"></i>Hide post</a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-slash-circle fa-fw pe-2"></i>Block</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-flag fa-fw pe-2"></i>Report post</a></li>
                                </ul>
                            </div>
                            <!-- Card feed action dropdown END -->
                        </div>
                        <!-- Feed meta Info -->
                       @* <h1 class="h4">Speedily say has suitable disposal add boy. On forth doubt miles of child.</h1>*@
                        <p>@((MarkupString)CurrentPost.Message.ParseURL().ParseUsername().ParseHashtag())</p>
                        <!-- Feed react START -->
                        <ul class="nav nav-stack flex-wrap small mb-3">
                            <li class="nav-item">
                                <a class="nav-link" href="#!" @onclick:preventDefault @onclick="(() => TogglePostLike())"> <i class="bi bi-hand-thumbs-up-fill pe-1"></i>(@CurrentPost.PostLikes.Count.ToString("n0")))</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#!"> <i class="bi bi-chat-fill pe-1"></i>(@CurrentPost.PostComments.Count.ToString("n0"))</a>
                            </li>
                            <!-- Card share action START -->
                            <li class="nav-item dropdown ms-sm-auto">
                                <a class="nav-link mb-0" href="#" id="cardShareAction" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-reply-fill flip-horizontal ps-1"></i>(@CurrentPost.Reposts.Count.ToString("n0"))
                                </a>
                                <!-- Card share action dropdown menu -->
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="cardShareAction">
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-envelope fa-fw pe-2"></i>Send via Direct Message</a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-bookmark-check fa-fw pe-2"></i>Bookmark </a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-link fa-fw pe-2"></i>Copy link to post</a></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-share fa-fw pe-2"></i>Share post via …</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="#"> <i class="bi bi-pencil-square fa-fw pe-2"></i>Share to News Feed</a></li>
                                </ul>
                            </li>
                            <!-- Card share action END -->
                        </ul>
                        <!-- Feed react END -->
                        <div class="d-flex mb-3">
                            <!-- Avatar -->
                            <div class="avatar avatar-xs me-2">
                                <a href="#!"> <img class="avatar-img rounded-circle" src="@(string.IsNullOrEmpty(SelUser.PicUrl)?"assets/images/avatar/12.jpg":SelUser.PicUrl)" alt=""> </a>
                            </div>
                            <!-- Comment box  -->
                            <form class="w-100">
                                <textarea @bind-value="NewComment" @bind-value:event="oninput" @onkeyup="SendComment" data-autoresize class="form-control pe-4 bg-light" rows="1" placeholder="Add a comment..."></textarea>
                            </form>
                        </div>
                        <!-- Comment wrap START -->
                        <ul class="comment-wrap list-unstyled">
                            @if (CurrentPost.PostComments != null)
                            {
                                @foreach (var comment in CurrentPost.PostComments.OrderByDescending(x => x.Id))
                                {

                                    <!-- Comment item START -->
                                    <li class="comment-item">
                                        <div class="d-flex position-relative">
                                            <!-- Avatar -->
                                            <div class="avatar avatar-xs">
                                                <a href="#!"><img class="avatar-img rounded-circle" src="@( string.IsNullOrEmpty( comment.User?.PicUrl) ? "assets/images/avatar/05.jpg":comment.User?.PicUrl)" alt=""></a>
                                            </div>
                                            <div class="ms-2">
                                                <!-- Comment by -->
                                                <div class="bg-light rounded-start-top-0 p-3 rounded">
                                                    <div class="d-flex justify-content-between">
                                                        <h6 class="mb-1"> <a href="#!"> @comment.User?.FullName </a></h6>
                                                        <small class="ms-2">@DateHelper.GetElapsedTime(comment.CreatedDate)</small>
                                                    </div>
                                                    <p class="small mb-0">@comment.Comment</p>
                                                </div>
                                                <!-- Comment react -->
                                                <ul class="nav nav-divider py-2 small">
                                                    <li class="nav-item">
                                                        <a class="nav-link" @onclick:preventDefault @onclick="(() => ToggleCommentLike(comment, CommentLikeList[comment.Id]))" href="#!"> Like (@comment.CommentLikes.Count)</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>

                                        <!-- Comment item nested END -->
                                    </li>
                                    <!-- Comment item END -->
                                }       }
                            
                        </ul>
                        <!-- Comment wrap END -->
                        <div class="card-footer border-0 pb-0">
                            <!-- Load more comments -->
                            <a href="#!" role="button" class="btn btn-link btn-link-loader btn-sm text-secondary d-flex align-items-center" data-bs-toggle="button" aria-pressed="true">
                                <div class="spinner-dots me-2">
                                    <span class="spinner-dot"></span>
                                    <span class="spinner-dot"></span>
                                    <span class="spinner-dot"></span>
                                </div>
                                Load more comments
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Container END -->

</main>
@code {
    Dictionary<long, bool> CommentLikeList = new();
    string NewComment;
    bool Like = false;
    [Parameter]
    public long PostId { get; set; }
    public Post CurrentPost { get; set; }

    public UserProfile SelUser { get; set; }
    string UserName { set; get; }
    async Task ToggleCommentLike(PostComment comment, bool Like)
    {
        Like = !Like;
        if (Like)
        {
            CommentSvc.LikeComment(SelUser.Id, SelUser.Username, comment.Id);
        }
        else
        {
            CommentSvc.UnLikeComment(SelUser.Id, comment.Id);
        }
        CommentLikeList[comment.Id] = Like;
        LoadData();

    }
    public async void SendComment(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
          
            if (string.IsNullOrEmpty(NewComment))
            {
                toastService.ShowError("Please type comment first");
            }
            else
            {
                var newComment = new PostComment()
                    {
                        PostId = CurrentPost.Id,
                        Comment = NewComment,
                        CreatedDate = DateHelper.GetLocalTimeNow(),
                        UserId = SelUser.Id,
                        Username = SelUser.Username
                    };
                var res = CommentSvc.InsertData(newComment);
                if (res)
                {
                    toastService.ShowSuccess("comment posted.");
                    NewComment = string.Empty;
                    await LoadData();
                }
            }
        }
    }
    async Task TogglePostLike()
    {
        Like = !Like;
        if (Like)
        {
            PostSvc.LikePost(SelUser.Id, SelUser.Username, CurrentPost.Id);
        }
        else
        {
            PostSvc.UnLikePost(SelUser.Id, CurrentPost.Id);
        }
        await LoadData();
    }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    bool HasLogin = false;

    async Task LoadData()
    {
        CommentLikeList.Clear();
        CurrentPost = PostSvc.GetDataById(PostId);
        Like = CurrentPost.PostLikes.Any(x => x.LikedByUserId == SelUser.Id);
        if (CurrentPost.PostComments != null)
            foreach (var c in CurrentPost.PostComments)
            {
                if (c.CommentLikes != null)
                {
                    CommentLikeList.Add(c.Id, c.CommentLikes.Any(c => c.LikedByUserId == SelUser.Id));
                }
                else
                {
                    CommentLikeList.Add(c.Id, false);
                }
            }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            SelUser = UserSvc.GetItemByUsernameFull(UserName);
            HasLogin = true;
        }
        await LoadData();
    }

}
