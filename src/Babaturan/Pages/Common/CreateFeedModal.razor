@inject NavigationManager NavMgr
@inject AzureBlobHelper AzureBlobHelper;
@inject IJSRuntime IJS
@using System.IO
@using System.Text.Json
@using System.Text.RegularExpressions;
@inject IToastService toastService
@inject UserProfileService UserSvc
@inject PostService PostSvc
@inject TrendingService TrendingSvc
@inject AppState AppState
@implements IDisposable
<div class="modal fade" id="modalCreateFeed" tabindex="-1" aria-labelledby="modalLabelCreateFeed" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <!-- Modal feed header START -->
            <div class="modal-header">
                <h5 class="modal-title" id="modalLabelCreateFeed">Create post</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <!-- Modal feed header END -->
            <!-- Modal feed body START -->
            <div class="modal-body">
                <!-- Add Feed -->
                <div class="d-flex mb-3">
                    <!-- Avatar -->
                    <div class="avatar avatar-xs me-2">
                        <img class="avatar-img rounded-circle" src="@(string.IsNullOrEmpty(selUser.PicUrl)?"assets/images/avatar/03.jpg":selUser.PicUrl)" alt="">
                    </div>
                    <!-- Feed box  -->
                    <form class="w-100">
                        <textarea class="form-control pe-4 fs-3 lh-1 border-0" @bind="NewPost.Message" rows="4" placeholder="Share your thoughts..." autofocus></textarea>
                    </form>
                </div>
                <!-- Feed rect START -->
                <div class="hstack gap-2">
                    <a class="icon-md bg-success bg-opacity-10 text-success rounded-circle" @onclick:preventDefault @onclick:stopPropagation @onclick="(()=>PrepareUpload(UploadTypes.Image))" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Photo"> <i class="bi bi-image-fill"></i> </a>
                    <a class="icon-md bg-info bg-opacity-10 text-info rounded-circle" @onclick:preventDefault @onclick:stopPropagation @onclick="(()=>PrepareUpload(UploadTypes.Video))" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Video"> <i class="bi bi-camera-reels-fill"></i> </a>
                    <a class="icon-md bg-danger bg-opacity-10 text-danger rounded-circle" @onclick="NotAvailable" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Events"> <i class="bi bi-calendar2-event-fill"></i> </a>
                    <a class="icon-md bg-warning bg-opacity-10 text-warning rounded-circle" @onclick="NotAvailable" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Feeling/Activity"> <i class="bi bi-emoji-smile-fill"></i> </a>
                    <a class="icon-md bg-light text-secondary rounded-circle" @onclick="NotAvailable" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Check in"> <i class="bi bi-geo-alt-fill"></i> </a>
                    <a class="icon-md bg-primary bg-opacity-10 text-primary rounded-circle" @onclick="NotAvailable" href="#" data-bs-toggle="tooltip" data-bs-placement="top" title="Tag people on top"> <i class="bi bi-tag-fill"></i> </a>
                </div>
                <InputFile @ref="imageUpload" id="uploadImage1" accept=".jpg,.png,.jpeg,.gif" OnChange="UploadFiles" hidden />
                <InputFile @ref="videoUpload" id="uploadVideo1" accept=".mp4,.avi,.wmv,.3gp" OnChange="UploadFiles" hidden />

                <!-- Feed rect END -->
            </div>
            <!-- Modal feed body END -->
            <!-- Modal feed footer -->
            <div class="modal-footer row justify-content-between">
                <!-- Select -->
                <div class="col-lg-3">
                    <select @bind="NewPost.AccessType" class="form-select js-choice choice-select-text-none" data-position="top" data-search-enabled="false">
                        @foreach (AccessTypes type in Enum.GetValues(typeof(AccessTypes)))
                        {
                            <option value="@type">@type.ToString()</option>
                        }

                    </select>
                    <!-- Button -->
                </div>
                <div class="col-lg-8 text-sm-end">
                    <button type="button" @onclick="NotAvailable" class="btn btn-danger-soft me-2"> <i class="bi bi-camera-video-fill pe-1"></i> Live video</button>
                    <button type="button" @onclick:preventDefault @onclick:stopPropagation @onclick="PostMessage" class="btn btn-success-soft">Post</button>
                </div>
            </div>
            <!-- Modal feed footer -->

        </div>
    </div>
</div>
@code {
    @code {
        [Parameter]
        public Action PostDataChanged { get; set; }
        InputFile imageUpload;
        InputFile videoUpload;
        [Parameter]
        public Post NewPost { get; set; }
        UploadTypes TipeUpload;
        UserProfile selUser;
        public enum UploadTypes { Image, Doc, Video }
        async Task PrepareUpload(UploadTypes tipe)
        {
            TipeUpload = tipe;
            switch (tipe)
            {
                case UploadTypes.Image:
                    await IJS.InvokeVoidAsync("OpenFileUpload", "uploadImage1");
                    NewPost.PostType = PostTypes.ImagePost;
                    break;
                case UploadTypes.Video:
                    await IJS.InvokeVoidAsync("OpenFileUpload", "uploadVideo1");
                    NewPost.PostType = PostTypes.VideoPost;
                    break;
            }

        }
        void NewPostRefresh(string Username)
        {
            this.NewPost = new();
            StateHasChanged();
        }
        void IDisposable.Dispose()
        {
            AppState.OnNewPostChange -= NewPostRefresh;
        }
        string ErrorMsg;
        async Task NotAvailable()
        {
            toastService.ShowWarning("Not available yet.");
        }
        [CascadingParameter]
        private Task<AuthenticationState> authenticationStateTask { get; set; }
        string Username;
        protected override async Task OnInitializedAsync()
        {
            var user = (await authenticationStateTask).User;

            if (user.Identity.IsAuthenticated)
            {
                Username = user.Identity.Name;
                selUser = UserSvc.GetItemByUsername(Username);

            }
            AppState.OnNewPostChange += NewPostRefresh;
            if (NewPost == null) NewPost = new();
        }
        async Task PostMessage()
        {
            ErrorMsg = "";

            if (string.IsNullOrEmpty(NewPost.Message))
            {
                ErrorMsg += "Tolong di isi pesan. ";

            }
            if (string.IsNullOrEmpty(NewPost.ImageUrls))
            {
                ErrorMsg += "Tolong pilih gambar. ";

            }
            if (ErrorMsg.Length > 0)
            {
                toastService.ShowWarning(ErrorMsg, "Perhatian");
                return;
            }

            NewPost.CreatedDate = DateHelper.GetLocalTimeNow();
            NewPost.Id = 0;
            NewPost.UserName = Username;
            //get link if exists
            //var linkParser = new Regex(@"\b(?:https?://|www\.)\S+\b", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var linkParser = new Regex(@"(http(s)?://)?([\w-]+\.)+[\w-]+(/\S\w[\w- ;,./?%&=]\S*)?", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            var cnt = 0;
            NewPost.LinkUrls = "";
            foreach (Match m in linkParser.Matches(NewPost.Message))
            {
                if (cnt > 0) NewPost.LinkUrls += ";";
                NewPost.LinkUrls += m.Value;
                cnt++;
            }
            //extract hashtag
            var regex = new Regex(@"#\w+");
            var matches = regex.Matches(NewPost.Message);
            cnt = 0;
            NewPost.Hashtags = "";
            foreach (Match m in matches)
            {
                if (cnt > 0) NewPost.Hashtags += ";";
                NewPost.Hashtags += m.Value;
                cnt++;
            }
            //extract mention
            regex = new Regex("(@)((?:[A-Za-z0-9-_]*))");
            matches = regex.Matches(NewPost.Message);
            cnt = 0;
            NewPost.Mentions = "";
            foreach (Match m in matches)
            {
                if (cnt > 0) NewPost.Mentions += ";";
                NewPost.Mentions += m.Value;
                cnt++;
            }


            if (selUser != null)
            {
                NewPost.UserId = selUser.Id;
            }
            if (PostSvc.InsertData(NewPost))
            {
                TrendingSvc.InsertFromPost(selUser, NewPost);
                toastService.ShowSuccess("Posting berhasil.", "Info");
                AppState.RefreshPost(selUser.Username);
                await IJS.InvokeVoidAsync("CloseModal", "modalCreateFeed");

                PostDataChanged?.Invoke();

            }
            else
            {
                toastService.ShowError("Gagal posting, ga tau kenapa..", "Kecele");
            }
        }

        private async Task UploadFiles(InputFileChangeEventArgs e)
        {
            var file = e.File;
            if (file != null)
            {
                var ms = new MemoryStream();
                await file.OpenReadStream(AppConstants.MaxAllowedFileSize).CopyToAsync(ms);
                var arr = ms.ToArray();
                var bytes = ImageHelper.FixedSize(ms, 800, 600, false);
                string newName = string.Empty;

                newName = $"lampiran_{TipeUpload.ToString()}_{Username}_{DateTime.Now.ToString("dd_MM_yyyy_HH_mm_ss")}_{file.Name}";
                var FileUrl = $"{AppConstants.UploadUrlPrefix}{newName}";
                await AzureBlobHelper.UploadFile(newName, bytes);
                switch (TipeUpload)
                {
                    case UploadTypes.Doc:
                        NewPost.DocUrls = FileUrl;
                        break;
                    case UploadTypes.Image:
                        NewPost.ImageUrls = FileUrl;
                        break;
                    case UploadTypes.Video:
                        NewPost.VideoUrls = FileUrl;
                        break;
                }

            }
        }
            }
        }
